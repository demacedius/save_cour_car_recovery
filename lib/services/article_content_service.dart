// ignore_for_file: unused_import, avoid_print

import 'dart:convert';
import 'package:http/http.dart' as http;

class ArticleContentService {
  static Future<String?> getArticleContent(String articleUrl) async {
    try {
      print('üîç R√©cup√©ration contenu article: $articleUrl');
      
      // Utiliser une API de scraping gratuite ou extraction simple
      final response = await http.get(
        Uri.parse(articleUrl),
        headers: {
          'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15',
        },
      );

      if (response.statusCode == 200) {
        final htmlContent = response.body;
        
        // Extraction simple du contenu principal
        final content = _extractMainContent(htmlContent);
        
        if (content.isNotEmpty) {
          print('‚úÖ Contenu r√©cup√©r√©: ${content.length} caract√®res');
          return content;
        }
      }
      
      print('‚ùå Impossible de r√©cup√©rer le contenu');
      return null;
    } catch (e) {
      print('Erreur r√©cup√©ration contenu: $e');
      return null;
    }
  }

  static String _extractMainContent(String html) {
    // Extraction simple du contenu textuel
    String content = html;
    
    // Supprimer les balises script et style
    content = content.replaceAll(RegExp(r'<script[^>]*>.*?</script>', dotAll: true), '');
    content = content.replaceAll(RegExp(r'<style[^>]*>.*?</style>', dotAll: true), '');
    
    // Rechercher le contenu principal (patterns courants)
    final patterns = [
      RegExp(r'<article[^>]*>(.*?)</article>', dotAll: true),
      RegExp(r'<div[^>]*class="[^"]*content[^"]*"[^>]*>(.*?)</div>', dotAll: true),
      RegExp(r'<div[^>]*class="[^"]*article[^"]*"[^>]*>(.*?)</div>', dotAll: true),
      RegExp(r'<main[^>]*>(.*?)</main>', dotAll: true),
    ];
    
    for (final pattern in patterns) {
      final match = pattern.firstMatch(content);
      if (match != null) {
        content = match.group(1) ?? '';
        break;
      }
    }
    
    // Nettoyer les balises HTML
    content = content.replaceAll(RegExp(r'<[^>]*>'), ' ');
    
    // Nettoyer les espaces multiples
    content = content.replaceAll(RegExp(r'\s+'), ' ');
    
    // D√©coder les entit√©s HTML courantes
    content = content
        .replaceAll('&nbsp;', ' ')
        .replaceAll('&amp;', '&')
        .replaceAll('&lt;', '<')
        .replaceAll('&gt;', '>')
        .replaceAll('&quot;', '"')
        .replaceAll('&#39;', "'");
    
    return content.trim();
  }

  // G√©n√©rer un contenu de demo r√©aliste si l'extraction √©choue
  static String generateDemoContent(String title, String description) {
    final templates = [
      '''
$description

Dans le secteur automobile en constante √©volution, cette actualit√© marque un tournant important pour l'industrie. Les constructeurs redoublent d'efforts pour r√©pondre aux attentes des consommateurs en mati√®re de performance, d'efficacit√© √©nerg√©tique et de technologies embarqu√©es.

## Points cl√©s √† retenir

‚Ä¢ Innovation technologique au c≈ìur de la strat√©gie
‚Ä¢ R√©ponse aux enjeux environnementaux actuels  
‚Ä¢ Positionnement concurrentiel renforc√©
‚Ä¢ Exp√©rience utilisateur am√©lior√©e

## Impact sur le march√©

Cette annonce s'inscrit dans une d√©marche plus large de transformation du secteur automobile. Les analystes pr√©voient que ces d√©veloppements auront un impact significatif sur les ventes et la perception de la marque.

Les consommateurs b√©n√©ficieront directement de ces am√©liorations, notamment en termes de confort de conduite, de s√©curit√© et d'efficacit√© √©nerg√©tique.

## Perspectives d'avenir

L'industrie automobile continue sa mutation vers une mobilit√© plus durable et connect√©e. Cette actualit√© confirme les tendances observ√©es ces derniers mois et annonce de nouveaux d√©veloppements passionnants √† venir.

Pour plus d'informations d√©taill√©es, consultez l'article complet sur le site de la source.
      ''',
    ];
    
    return templates[0];
  }
}